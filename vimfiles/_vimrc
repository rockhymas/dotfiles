" Copyright 2011 Rock Hymas. All rights reserved.

" Pathogen bundle setup {{{
filetype off
call pathogen#runtime_append_all_bundles()
" }}}

" Set mapleader for all following mappings {{{
let mapleader = ","
" }}}

" Make it ViM on Windows {{{
set nocompatible        " This must be first, because it changes other options as a side effect.

source $VIMRUNTIME/mswin.vim

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif
" }}}

" Enable file type detection, filetype indenting {{{
filetype plugin indent on
syntax on
" }}}

" Random Behavior {{{
if has("vms")
    set nobackup          " do not keep a backup file, use versions instead
else
    set backup            " keep a backup file
endif
set history=50          " keep 50 lines of command line history
set showcmd             " display incomplete commands
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set modelines=0         " no need for modelines, risky anyway
set scrolloff=3         " Scroll three lines before hitting the edge of the screen
set wildmenu            " show tab completion for commands above command line
set hidden              " keep buffers around if replaced via :e
set wildmode=list:full  " complete first match, and show list of matches
set visualbell          " Don't beep, just flash the screen quickly
set laststatus=2        " Always show status line for last window
set undofile            " keep persistent undo files
" }}}

" Search behavior {{{
set incsearch           " move the cursor as you type the search
set ignorecase          " by default, when searching
set smartcase           " override ignorecase if uppercase characters are typed
set gdefault            " replace all matches on a line by default
set showmatch           " Jump to matching bracket while searching
set hlsearch
" }}}

" Appearance {{{
set cursorline          " Highlight the line the cursor is on
set list                " Show certain characters
set listchars=tab:>-,trail:- " Show tabs as >--- and trailing spaces as -
set relativenumber      " Do relative line numbering, rather than absolute
set ruler               " show the cursor position all the time
set showmode            " display non-command modes in command line
set ttyfast             " Do faster updating of the screen
set wrap                " Wrap lines
" }}}

" Tab stuff {{{
set shiftwidth=4
set smarttab
set softtabstop=4
set expandtab
set tabstop=4
" }}}

" Store backup, swap, and undo files {{{
set directory=~/vimfiles/temp/,c:/tmp,c:/temp
set backupdir=~/vimfiles/temp/,c:/tmp,c:/temp
set undodir=~/vimfiles/undo
" }}}

" Gui options {{{
let &guioptions = substitute(&guioptions, "t", "", "g") " No tearoff menus
let &guioptions = substitute(&guioptions, "T", "", "g") " No toolbar
let &guioptions = substitute(&guioptions, "m", "", "g") " No menubar
let &guioptions = substitute(&guioptions, "r", "", "g") " No right scrollbar
let &guioptions = substitute(&guioptions, "L", "", "g") " No left scrollbar
" }}}

" Common autocommands {{{
augroup vimrcEx
    au!

    " Show the cursor line for the current window only
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline

    " Start gvim maximized
    autocmd GUIEnter * simalt ~x

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

augroup END
" }}}

" Don't use Ex mode, use Q for formatting {{{
map Q gq
" }}}

" Tab and windows movement {{{
:nnoremap <C-Tab> <C-PageDown>
:nnoremap  <C-S-Tab> <C-PageUp>
:vnoremap  <C-Tab> <C-PageDown>
:vnoremap  <C-S-Tab> <C-PageUp>
:inoremap <C-Tab> <C-PageDown>
:inoremap <C-S-Tab> <C-PageUp>
:nnoremap  <C-PageDown> <C-W>w
:nnoremap  <C-PageUp> <C-W>W
:vnoremap  <C-PageDown> <C-W>w
:vnoremap  <C-PageUp> <C-W>W
:inoremap <C-PageDown> <C-W>w
:inoremap <C-PageUp> <C-W>W
" }}}

" Use jk for leaving insert mode, not escape {{{
:inoremap jk <esc>
:vnoremap jk <esc>
:inoremap <esc> <nop>
:vnoremap <esc> <nop>
" }}}

" Disable arrow keys {{{
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
" }}}

" Make j/k go up/down by screen lines, not file lines {{{
noremap j gj
noremap k gk
" }}}

" Move further left and right {{{
noremap H 0
noremap L $
" }}}

" Make it easier to enter command mode {{{
noremap ; :
" }}}

" Operator pending helpers - next and last blocks {{{
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap an( :<c-u>normal! f(va(<cr>
onoremap al( :<c-u>normal! F)va(<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap il{ :<c-u>normal! F}vi{<cr>
onoremap an{ :<c-u>normal! f{va{<cr>
onoremap al{ :<c-u>normal! F}va{<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap il[ :<c-u>normal! F]vi[<cr>
onoremap an[ :<c-u>normal! f[va[<cr>
onoremap al[ :<c-u>normal! F]va[<cr>
" }}}

" VimRC specific mappings {{{
augroup filetype_vim
    au!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim setlocal foldlevelstart=0
augroup END
" }}}

" Markdown specific mappings {{{
augroup filetype_markdown
    au!
    autocmd FileType markdown onoremap ih :<c-u>execute "normal! ?^\\(==\\+\\\|--\\+\\)$\r:nohlsearch\rkvg_"<cr>
    autocmd FileType markdown onoremap ah :<c-u>execute "normal! ?^\\(==\\+\\\|--\\+\\)$\r:nohlsearch\rg_vk0"<cr>
augroup END
" }}}

" easily clear current search {{{
nnoremap <leader><space> :noh<cr>
" }}}

" Move lines up or down {{{
nnoremap <leader>j ddp
nnoremap <leader>k ddkkp
" }}}

" Uppercase or put quotes around the current word {{{
nnoremap <leader>u viwUe
nnoremap <leader>" viwh<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viwh<esc>a'<esc>hbi'<esc>lel
" }}}

" Quotes around the current selection {{{
vnoremap <leader>" o<esc>i"<esc>gvlo<esc>a"<esc>gvl
" }}}

" Open and source the vimrc file {{{
nnoremap <leader>ev :vsplit $MYVIMRC<cr>wgf
nnoremap <leader>sv :source $MYVIMRC<cr>
" }}}

" Commenting in various file types {{{
augroup commenting
    au!
    autocmd FileType c nnoremap <buffer> <localleader>c I//
    autocmd FileType cpp nnoremap <buffer> <localleader>c I//
    autocmd FileType cs nnoremap <buffer> <localleader>c I//
    autocmd FileType javascript nnoremap <buffer> <localleader>c I//
    autocmd FileType python nnoremap <buffer> <localleader>c I#
    autocmd FileType was nnoremap <buffer> <localleader>c I'
    autocmd FileType vim nnoremap <buffer> <localleader>c I"
augroup END
" }}}

" iff abbreviation in various file types {{{
augroup iff
    au!
    autocmd FileType c iabbrev <buffer> iff if {}<left><left><left>
    autocmd FileType cpp :iabbrev <buffer> iff if {}<left><left><left>
    autocmd FileType cs :iabbrev <buffer> iff if {}<left><left><left>
    autocmd FileType javascript :iabbrev <buffer> iff if ( ) {}<left><left><left><left><left>
    autocmd FileType python :iabbrev <buffer> iff if:<left>
    autocmd FileType was :iabbrev <buffer> iff If Then<cr>End If<up><left><left><left><left>
augroup END
" }}}

" Common abbreviations {{{
iabbrev adn and
iabbrev teh the
iabbrev tehn then
iabbrev waht what
" }}}

" Personal abbreviations {{{
iabbrev @@ rock@hymasfamily.org
iabbrev ccopy Copyright 2011 Rock Hymas. All rights reserved.
iabbrev wweb http://rockhymas.com
iabbrev ssig --<cr>Rock Hymas<cr>rock@hymasfamily.org
" }}}
